//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MockExam_ClientTCP.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/MockExam_Soap")]
    [System.SerializableAttribute()]
    public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double CelciusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double FehrenheitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Celcius {
            get {
                return this.CelciusField;
            }
            set {
                if ((this.CelciusField.Equals(value) != true)) {
                    this.CelciusField = value;
                    this.RaisePropertyChanged("Celcius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Fehrenheit {
            get {
                return this.FehrenheitField;
            }
            set {
                if ((this.FehrenheitField.Equals(value) != true)) {
                    this.FehrenheitField = value;
                    this.RaisePropertyChanged("Fehrenheit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Celcius", ReplyAction="http://tempuri.org/IService1/CelciusResponse")]
        double Celcius(double c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Celcius", ReplyAction="http://tempuri.org/IService1/CelciusResponse")]
        System.Threading.Tasks.Task<double> CelciusAsync(double c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Fehrenheit", ReplyAction="http://tempuri.org/IService1/FehrenheitResponse")]
        double Fehrenheit(double f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Fehrenheit", ReplyAction="http://tempuri.org/IService1/FehrenheitResponse")]
        System.Threading.Tasks.Task<double> FehrenheitAsync(double f);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        MockExam_ClientTCP.ServiceReference1.CompositeType GetDataUsingDataContract(MockExam_ClientTCP.ServiceReference1.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<MockExam_ClientTCP.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(MockExam_ClientTCP.ServiceReference1.CompositeType composite);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : MockExam_ClientTCP.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<MockExam_ClientTCP.ServiceReference1.IService1>, MockExam_ClientTCP.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public double Celcius(double c) {
            return base.Channel.Celcius(c);
        }
        
        public System.Threading.Tasks.Task<double> CelciusAsync(double c) {
            return base.Channel.CelciusAsync(c);
        }
        
        public double Fehrenheit(double f) {
            return base.Channel.Fehrenheit(f);
        }
        
        public System.Threading.Tasks.Task<double> FehrenheitAsync(double f) {
            return base.Channel.FehrenheitAsync(f);
        }
        
        public MockExam_ClientTCP.ServiceReference1.CompositeType GetDataUsingDataContract(MockExam_ClientTCP.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<MockExam_ClientTCP.ServiceReference1.CompositeType> GetDataUsingDataContractAsync(MockExam_ClientTCP.ServiceReference1.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
    }
}
